


from algorisme import algorisme_ineficient, tsp_brute_force, tsp


# Example usage
cost_matrix = [
    [0, 10, 15, 20, 3],
    [2, 10, 15, 20, 8],
    [10, 0, 35, 25, 2],
    [15, 35, 0, 30, 12],
    [20, 25, 30, 4, 7]
]


cost_matrix = [
    [0, 20, 30, 40, 50, 60, 70],
    [20, 100, 25, 35, 45, 55, 65],
    [30, 25, 0, 30, 40, 50, 12],
    [40, 35, 30, 0, 35, 45, 55],
    [50, 45, 40, 35, 3, 40, 50],
    [60, 23, 50, 45, 40, 0, 45],
    [70, 65, 60, 55, 50, 45, 0]
]

cost_matrix = [
    [0, 29, 20, 21, 16, 31, 100, 12, 4, 31],
    [29, 0, 15, 29, 28, 40, 72, 21, 29, 41],
    [20, 15, 0, 15, 14, 25, 81, 9, 23, 27],
    [21, 29, 15, 0, 4, 12, 92, 12, 25, 13],
    [16, 28, 14, 4, 0, 16, 94, 9, 20, 16],
    [31, 40, 25, 12, 16, 0, 95, 24, 36, 3],
    [100, 72, 81, 92, 94, 95, 0, 90, 101, 99],
    [12, 21, 9, 12, 9, 24, 90, 0, 15, 25],
    [4, 29, 23, 25, 20, 36, 101, 15, 0, 35],
    [31, 41, 27, 13, 16, 3, 99, 25, 35, 0]
]

cost_matrix = [
    [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110],
    [10, 0, 15, 25, 35, 45, 55, 65, 75, 85, 95, 105],
    [20, 15, 0, 20, 30, 40, 50, 60, 70, 80, 90, 100],
    [30, 25, 20, 0, 25, 35, 45, 55, 65, 75, 85, 95],
    [40, 35, 30, 25, 0, 30, 40, 50, 60, 70, 80, 90],
    [50, 45, 40, 35, 30, 0, 35, 45, 55, 65, 75, 85],
    [60, 55, 50, 45, 40, 35, 0, 40, 50, 60, 70, 80],
    [70, 65, 60, 55, 50, 45, 40, 0, 45, 55, 65, 75],
    [80, 75, 70, 65, 60, 55, 50, 45, 0, 50, 60, 70],
    [90, 85, 80, 75, 70, 65, 60, 55, 50, 0, 55, 65],
    [100, 95, 90, 85, 80, 75, 70, 65, 60, 55, 0, 60],
    [110, 105, 100, 95, 90, 85, 80, 75, 70, 65, 60, 0]
]

'''cost_matrix = [
    [0, 12, 10, 18, 25, 22, 19, 21, 24, 30, 28, 26, 20, 15, 13, 17],
    [12, 0, 14, 16, 20, 18, 25, 27, 22, 21, 29, 31, 23, 19, 16, 14],
    [10, 14, 0, 11, 17, 15, 22, 24, 19, 18, 26, 28, 20, 16, 13, 11],
    [18, 16, 11, 0, 9, 7, 14, 16, 11, 10, 18, 20, 12, 8, 5, 7],
    [25, 20, 17, 9, 0, 8, 5, 7, 6, 15, 13, 11, 3, 9, 12, 10],
    [22, 18, 15, 7, 8, 0, 9, 11, 6, 12, 10, 8, 5, 11, 14, 12],
    [19, 25, 22, 14, 5, 9, 0, 2, 9, 7, 5, 3, 8, 14, 17, 15],
    [21, 27, 24, 16, 7, 11, 2, 0, 7, 5, 3, 1, 10, 16, 19, 17],
    [24, 22, 19, 11, 6, 6, 9, 7, 0, 8, 6, 4, 9, 15, 18, 16],
    [30, 21, 18, 10, 15, 12, 7, 5, 8, 0, 2, 4, 12, 18, 21, 19],
    [28, 29, 26, 18, 13, 10, 5, 3, 6, 2, 0, 2, 10, 16, 19, 17],
    [26, 31, 28, 20, 11, 8, 3, 1, 4, 4, 2, 0, 8, 14, 17, 15],
    [20, 23, 20, 12, 3, 5, 8, 10, 9, 12, 10, 8, 0, 6, 9, 7],
    [15, 19, 16, 8, 9, 11, 14, 16, 15, 18, 16, 14, 6, 0, 3, 1],
    [13, 16, 13, 5, 12, 14, 17, 19, 18, 21, 19, 17, 9, 3, 0, 2],
    [17, 14, 11, 7, 10, 12, 15, 17, 16, 19, 17, 15, 7, 1, 2, 0]
]'''

# This matrix is ready to be used with a TSP algorithm.

# Ready to be used with a TSP solving algorithm.


# This matrix can be used with the TSP algorithm.


# You can use this matrix with the tsp_brute_force function

'''
# Run the algorithm
optimal_distance, path = algorisme_ineficient(test_matrix)

# Print the result
print(f"Optimal Distance: {optimal_distance}")
print(f"Path: {path}")'''
#print("\nTest Failed: The algorithm does not work as expected.")


#path, cost = tsp_brute_force(cost_matrix)
#print("Path:", path)
#print("Cost:", cost)


cost, path = tsp(cost_matrix)
print("Path:", path)
print("Cost:", cost)




print(algorisme_ineficient(cost_matrix))

